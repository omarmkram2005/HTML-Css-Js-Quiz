{
  "fileName": "CSS",
  "questions": [
    {
      "question": "What is JavaScript primarily used for?",
      "options": [
        "Creating databases",
        "Designing web pages",
        "Building server-side applications",
        "Adding interactivity to web pages"
      ],
      "answer": "Adding interactivity to web pages"
    },
    {
      "question": "Which of the following is not a primitive data type in JavaScript?",
      "options": ["Number", "String", "Array", "Boolean"],
      "answer": "Array"
    },
    {
      "question": "What is the correct way to declare a variable in JavaScript?",
      "options": ["var x;", "int x;", "float x;", "let x = 10;"],
      "answer": "let x = 10;"
    },
    {
      "question": "How do you write a comment in JavaScript?",
      "options": [
        "// This is a comment",
        "/* This is a comment */",
        "//This is a comment//",
        "\\This is a comment\\"
      ],
      "answer": "Both a) and b)"
    },
    {
      "question": "What is the result of the following expression: 5 + \"5\"?",
      "options": ["10", "\"55\"", "Error", "55"],
      "answer": "\"55\""
    },
    {
      "question": "What is the output of the following code: `console.log(typeof NaN);`?",
      "options": ["number", "NaN", "undefined", "string"],
      "answer": "number"
    },
    {
      "question": "What is the purpose of the `this` keyword in JavaScript?",
      "options": [
        "To refer to the current function",
        "To refer to the global object",
        "To refer to the objectthat the function is a method of",
        "To refer to the previous object"
      ],
      "answer": "To refer to the object that the function is a method of"
    },
    {
      "question": "What is the difference between `==` and `===` operators?",
      "options": [
        "`==` checks for value equality, `===` checks for both value and type equality",
        "`===` checks for value equality, `==` checks for both value and type equality",
        "There is no difference between them",
        "`==` is used for strings, `===` is used for numbers"
      ],
      "answer": "`==` checks for value equality, `===` checks for both value and type equality"
    },
    {
      "question": "What is the output of the following code: `console.log(typeof null);`?",
      "options": ["object", "null", "undefined", "string"],
      "answer": "object"
    },
    {
      "question": "What is the correct way to define an arrow function?",
      "options": [
        "function myFunction() {}",
        "const myFunction = () => {}",
        "let myFunction = function() {}",
        "var myFunction = () => {}"
      ],
      "answer": "const myFunction = () => {}"
    },
    {
      "question": "What is the output of the following code: `console.log([1, 2, 3].map(x => x * 2));`?",
      "options": ["[1, 2, 3]", "[2, 4, 6]", "[3, 4, 5]", "Error"],
      "answer": "[2, 4, 6]"
    },
    {
      "question": "What is the purpose of the `async/await` syntax in JavaScript?",
      "options": [
        "To make asynchronous code look synchronous",
        "To improve performance of synchronous code",
        "To create asynchronous functions",
        "To handle errors in asynchronous code"
      ],
      "answer": "To make asynchronous code look synchronous"
    },
    {
      "question": "What is the difference between `let` and `const` keywords?",
      "options": [
        "`let` declares a block-scoped variable, `const` declares a function-scoped variable",
        "`let` declares a mutable variable, `const` declares an immutable variable",
        "`let` is used for objects, `const` is used for primitives",
        "There is no difference between them"
      ],
      "answer": "`let` declares a mutable variable, `const` declares an immutable variable"
    },
    {
      "question": "What is the output of the following code: `console.log([1, 2, 3].reduce((acc, cur) => acc + cur, 0));`?",
      "options": ["1", "3", "6", "9"],
      "answer": "6"
    },
    {
      "question": "What is the purpose of the `Promise` object in JavaScript?",
      "options": [
        "To handle asynchronous operations",
        "To create synchronous functions",
        "To improve performance of synchronous code",
        "To handle errors in synchronous code"
      ],
      "answer": "To handle asynchronous operations"
    },
    {
      "question": "How do you select an element with the ID \"myElement\" in JavaScript?",
      "options": [
        "document.getElementById(\"myElement\")",
        "document.querySelector(\"#myElement\")",
        "Both a) and b)",
        "None of the above"
      ],
      "answer": "Both a) and b)"
    },
    {
      "question": "How do you change the text content of an element with the ID \"myElement\"?",
      "options": [
        "document.getElementById(\"myElement\").textContent = \"New Text\";",
        "document.querySelector(\"#myElement\").innerHTML = \"New Text\";",
        "Both a) and b)",
        "None of the above"
      ],
      "answer": "Both a) and b)"
    },
    {
      "question": "How do you add an event listener to an element in JavaScript?",
      "options": [
        "element.addEventListener(\"click\", function() {});",
        "element.onclick = function() {};",
        "Both a) and b)",
        "None of the above"
      ],
      "answer": "Both a) and b)"
    },
    {
      "question": "How do you create a new element in JavaScript?",
      "options": [
        "let newElement = document.createElement(\"div\");",
        "let newElement = document.getElementById(\"div\");",
        "let newElement = document.querySelector(\"div\");",
        "None of the above"
      ],
      "answer": "let newElement = document.createElement(\"div\");"
    },
    {
      "question": "How do you append a child element to a parent element in JavaScript?",
      "options": [
        "parentElement.appendChild(childElement);",
        "parentElement.insertBefore(childElement, parentElement.firstChild);",
        "Both a) and b)",
        "None of the above"
      ],
      "answer": "Both a) and b)"
    },
    {
      "question": "What is the difference between '=='' and '===' operators?",
      "options": [
        "'==' checks for value equality, '===' checks for both value and type equality",
        "'===' checks for value equality, '==' checks for both value and type equality",
        "There is no difference between them",
        "'==' is used for strings, '===' is used for numbers"
      ],
      "answer": "'==' checks for value equality, '===' checks for both value and type equality"
    },
    {
      "question": "What is the output of the following code: `console.log(typeof null);`?",
      "options": ["object", "null", "undefined", "string"],
      "answer": "object"
    },
    {
      "question": "What is the correct way to define an arrow function?",
      "options": [
        "function myFunction() {}",
        "const myFunction = () => {}",
        "let myFunction = function() {}",
        "var myFunction = () => {}"
      ],
      "answer": "const myFunction = () => {}"
    },
    {
      "question": "What is the output of the following code: `console.log([1, 2, 3].map(x => x * 2));`?",
      "options": ["[1, 2, 3]", "[2, 4, 6]", "[3, 4, 5]", "Error"],
      "answer": "[2, 4, 6]"
    },
    {
      "question": "What is the purpose of the `async/await` syntax in JavaScript?",
      "options": [
        "To make asynchronous code look synchronous",
        "To improve performance of synchronous code",
        "To create asynchronous functions",
        "To handle errors in asynchronous code"
      ],
      "answer": "To make asynchronous code look synchronous"
    },
    {
      "question": "What is the difference between `let` and `const` keywords?",
      "options": [
        "`let` declares a block-scoped variable, `const` declares a function-scoped variable",
        "`let` declares a mutable variable, `const` declares an immutable variable",
        "`let` is used for objects, `const` is used for primitives",
        "There is no difference between them"
      ],
      "answer": "`let` declares a mutable variable, `const` declares an immutable variable"
    },
    {
      "question": "What is the output of the following code: `console.log([1, 2, 3].reduce((acc, cur) => acc + cur, 0));`?",
      "options": ["1", "3", "6", "9"],
      "answer": "6"
    },
    {
      "question": "What is the purpose of the `Promise` object in JavaScript?",
      "options": [
        "To handle asynchronous operations",
        "To create synchronous functions",
        "To improve performance of synchronous code",
        "To handle errors in synchronous code"
      ],
      "answer": "To handle asynchronous operations"
    },
    {
      "question": "How do you select an element with the ID \"myElement\" in JavaScript?",
      "options": [
        "document.getElementById(\"myElement\")",
        "document.querySelector(\"#myElement\")",
        "Both a) and b)",
        "None of the above"
      ],
      "answer": "Both a) and b)"
    },
    {
      "question": "How do you change the text content of an element with the ID \"myElement\"?",
      "options": [
        "document.getElementById(\"myElement\").textContent = \"New Text\";",
        "document.querySelector(\"#myElement\").innerHTML = \"New Text\";",
        "Both a) and b)",
        "None of the above"
      ],
      "answer": "Both a) and b)"
    },
    {
      "question": "How do you add an event listener to an element in JavaScript?",
      "options": [
        "element.addEventListener(\"click\", function() {});",
        "element.onclick = function() {};",
        "Both a) and b)",
        "None of the above"
      ],
      "answer": "Both a) and b)"
    },
    {
      "question": "How do you create a new element in JavaScript?",
      "options": [
        "let newElement = document.createElement(\"div\");",
        "let newElement = document.getElementById(\"div\");",
        "let newElement = document.querySelector(\"div\");",
        "None of the above"
      ],
      "answer": "let newElement = document.createElement(\"div\");"
    },
    {
      "question": "How do you append a child element to a parent element in JavaScript?",
      "options": [
        "parentElement.appendChild(childElement);",
        "parentElement.insertBefore(childElement, parentElement.firstChild);",
        "Both a) and b)",
        "None of the above"
      ],
      "answer": "Both a) and b)"
    },
    {
      "question": "What is the output of the following code: `console.log(typeof undefined);`?",
      "options": ["undefined", "null", "object", "string"],
      "answer": "undefined"
    },
    {
      "question": "What is the purpose of the `try...catch` block in JavaScript?",
      "options": [
        "To handle errors in asynchronous code",
        "To improve performance of synchronous code",
        "To create asynchronous functions",
        "To handle errors in synchronous code"
      ],
      "answer": "To handle errors in synchronous code"
    },
    {
      "question": "What is the difference between `==` and `===` operators?",
      "options": [
        "'==' checks for value equality, '===' checks for both value and type equality",
        "'===' checks for value equality, '==' checks for both value and type equality",
        "There is no difference between them",
        "'==' is used for strings, '===' is used for numbers"
      ],
      "answer": "'==' checks for value equality, '===' checks for both value and type equality"
    },
    {
      "question": "What is the output of the following code: `console.log(typeof null);`?",
      "options": ["object", "null", "undefined", "string"],
      "answer": "object"
    },
    {
      "question": "What is the correct way to define an arrow function?",
      "options": [
        "function myFunction() {}",
        "const myFunction = () => {}",
        "let myFunction = function() {}",
        "var myFunction = () => {}"
      ],
      "answer": "const myFunction = () => {}"
    },
    {
      "question": "What is the output of the following code: `console.log([1, 2, 3].map(x => x * 2));`?",
      "options": ["[1, 2, 3]", "[2, 4, 6]", "[3, 4, 5]", "Error"],
      "answer": "[2, 4, 6]"
    },
    {
      "question": "What is the purpose of the `async/await` syntax in JavaScript?",
      "options": [
        "To make asynchronous code look synchronous",
        "To improve performance of synchronous code",
        "To create asynchronous functions",
        "To handle errors in asynchronous code"
      ],
      "answer": "To make asynchronous code look synchronous"
    },
    {
      "question": "What is the output of the following code: `console.log(typeof null);`?",
      "options": ["object", "null", "undefined", "string"],
      "answer": "object"
    },
    {
      "question": "What is the correct way to define an arrow function?",
      "options": [
        "function myFunction() {}",
        "const myFunction = () => {}",
        "let myFunction = function() {}",
        "var myFunction = () => {}"
      ],
      "answer": "const myFunction = () => {}"
    },
    {
      "question": "What is the output of the following code: `console.log([1, 2, 3].map(x => x * 2));`?",
      "options": ["[1, 2, 3]", "[2, 4, 6]", "[3, 4, 5]", "Error"],
      "answer": "[2, 4, 6]"
    },
    {
      "question": "What is the purpose of the `async/await` syntax in JavaScript?",
      "options": [
        "To make asynchronous code look synchronous",
        "To improve performance of synchronous code",
        "To create asynchronous functions",
        "To handle errors in asynchronous code"
      ],
      "answer": "To make asynchronous code look synchronous"
    },
    {
      "question": "What is the difference between `let` and `const` keywords?",
      "options": [
        "`let` declares a block-scoped variable, `const` declares a function-scoped variable",
        "`let` declares a mutable variable, `const` declares an immutable variable",
        "`let` is used for objects, `const` is used for primitives",
        "There is no difference between them"
      ],
      "answer": "`let` declares a mutable variable, `const` declares an immutable variable"
    },
    {
      "question": "What is the output of the following code: `console.log([1, 2, 3].reduce((acc, cur) => acc + cur, 0));`?",
      "options": ["1", "3", "6", "9"],
      "answer": "6"
    },
    {
      "question": "What is the purpose of the `Promise` object in JavaScript?",
      "options": [
        "To handle asynchronous operations",
        "To create synchronous functions",
        "To improve performance of synchronous code",
        "To handle errors in synchronous code"
      ],
      "answer": "To handle asynchronous operations"
    },
    {
      "question": "How do you select an element with the ID \"myElement\" in JavaScript?",
      "options": [
        "document.getElementById(\"myElement\")",
        "document.querySelector(\"#myElement\")",
        "Both a) and b)",
        "None of the above"
      ],
      "answer": "Both a) and b)"
    },
    {
      "question": "How do you change the text content of an element with the ID \"myElement\"?",
      "options": [
        "document.getElementById(\"myElement\").textContent = \"New Text\";",
        "document.querySelector(\"#myElement\").innerHTML = \"New Text\";",
        "Both a) and b)",
        "None of the above"
      ],
      "answer": "Both a) and b)"
    },
    {
      "question": "How do you add an event listener to an element in JavaScript?",
      "options": [
        "element.addEventListener(\"click\", function() {});",
        "element.onclick = function() {};",
        "Both a) and b)",
        "None of the above"
      ],
      "answer": "Both a) and b)"
    },
    {
      "question": "How do you create a new element in JavaScript?",
      "options": [
        "let newElement = document.createElement(\"div\");",
        "let newElement = document.getElementById(\"div\");",
        "let newElement = document.querySelector(\"div\");",
        "None of the above"
      ],
      "answer": "let newElement = document.createElement(\"div\");"
    },
    {
      "question": "How do you append a child element to a parent element in JavaScript?",
      "options": [
        "parentElement.appendChild(childElement);",
        "parentElement.insertBefore(childElement, parentElement.firstChild);",
        "Both a) and b)",
        "None of the above"
      ],
      "answer": "Both a) and b)"
    },
    {
      "question": "What is the output of the following code: `console.log(typeof undefined);`?",
      "options": ["undefined", "null", "object", "string"],
      "answer": "undefined"
    },
    {
      "question": "What is the purpose of the `try...catch` block in JavaScript?",
      "options": [
        "To handle errors in asynchronous code",
        "To improve performance of synchronous code",
        "To create asynchronous functions",
        "To handle errors in synchronous code"
      ],
      "answer": "To handle errors in synchronous code"
    },
    {
      "question": "What is the difference between `==` and `===` operators?",
      "options": [
        "'==' checks for value equality, '===' checks for both value and type equality",
        "'===' checks for value equality, '==' checks for both value and type equality",
        "There is no difference between them",
        "'==' is used for strings, '===' is used for numbers"
      ],
      "answer": "'==' checks for value equality, '===' checks for both value and type equality"
    },
    {
      "question": "What is the output of the following code: `console.log(typeof null);`?",
      "options": ["object", "null", "undefined", "string"],
      "answer": "object"
    },
    {
      "question": "What is the correct way to define an arrow function?",
      "options": [
        "function myFunction() {}",
        "const myFunction = () => {}",
        "let myFunction = function() {}",
        "var myFunction = () => {}"
      ],
      "answer": "const myFunction = () => {}"
    },
    {
      "question": "What is the output of the following code: `console.log([1, 2, 3].map(x => x * 2));`?",
      "options": ["[1, 2, 3]", "[2, 4, 6]", "[3, 4, 5]", "Error"],
      "answer": "[2, 4, 6]"
    },
    {
      "question": "What is the purpose of the `async/await` syntax in JavaScript?",
      "options": [
        "To make asynchronous code look synchronous",
        "To improve performance of synchronous code",
        "To create asynchronous functions",
        "To handle errors in asynchronous code"
      ],
      "answer": "To make asynchronous code look synchronous"
    }
  ]
}
